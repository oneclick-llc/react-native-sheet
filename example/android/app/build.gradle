apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

react {
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "sheet.example"
    defaultConfig {
        applicationId "sheet.example"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
  implementation("com.facebook.react:hermes-android")
}

// Run Codegen during development for the example app.
tasks.register('invokeLibraryCodegen', Exec) {
  workingDir "$rootDir/../../"
  def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')

  if (isWindows) {
    commandLine 'cmd', '/c', 'npx bob build --target codegen'
  } else {
    commandLine 'sh', '-c', 'npx bob build --target codegen'
  }
}

preBuild.dependsOn invokeLibraryCodegen
